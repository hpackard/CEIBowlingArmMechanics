#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include <k4a/k4a.h>
#include <k4abt.h>

#define VERIFY(result, error)                                                                            \
    if(result != K4A_RESULT_SUCCEEDED)                                                                   \
    {                                                                                                    \
        printf("%s \n - (File: %s, Function: %s, Line: %d)\n", error, __FILE__, __FUNCTION__, __LINE__); \
        exit(1);                                                                                         \
    }                                                                                                    \

int main()
{
	//we want chest, naval, hand, wrist, forearm, shoulder, clavicle, head (we can do right arm only)
	float totalchesty = 0;
	float totalnavaly = 0;
	float totalrfingery = 0;
	float totalrhandy = 0;
	float totalrwristy = 0;
	float totalrshouldery = 0;
	float totalrclavicley = 0;
	float totalheady = 0;

	k4a_device_t device = NULL;
	VERIFY(k4a_device_open(0, &device), "Open K4A Device failed!");

	// Start camera. Make sure depth camera is enabled.
	k4a_device_configuration_t deviceConfig = K4A_DEVICE_CONFIG_INIT_DISABLE_ALL;
	deviceConfig.depth_mode = K4A_DEPTH_MODE_NFOV_UNBINNED;
	deviceConfig.color_resolution = K4A_COLOR_RESOLUTION_OFF;
	VERIFY(k4a_device_start_cameras(device, &deviceConfig), "Start K4A cameras failed!");

	k4a_calibration_t sensor_calibration;
	VERIFY(k4a_device_get_calibration(device, deviceConfig.depth_mode, deviceConfig.color_resolution, &sensor_calibration),
		"Get depth camera calibration failed!");

	k4abt_tracker_t tracker = NULL;
	k4abt_tracker_configuration_t tracker_config = K4ABT_TRACKER_CONFIG_DEFAULT;
	VERIFY(k4abt_tracker_create(&sensor_calibration, tracker_config, &tracker), "Body tracker initialization failed!");

	int frame_count = 0;
	//triggering the system when arm movement is detected
//	float trigger = 0;
	//int trigcount = 0;
	//float rhand[900];
	do
	{
		k4a_capture_t sensor_capture;
		k4a_wait_result_t get_capture_result = k4a_device_get_capture(device, &sensor_capture, K4A_WAIT_INFINITE);
		if (get_capture_result == K4A_WAIT_RESULT_SUCCEEDED)
		{
			frame_count++;
			k4a_wait_result_t queue_capture_result = k4abt_tracker_enqueue_capture(tracker, sensor_capture, K4A_WAIT_INFINITE);
			k4a_capture_release(sensor_capture); // Remember to release the sensor capture once you finish using it
			if (queue_capture_result == K4A_WAIT_RESULT_TIMEOUT)
			{
				// It should never hit timeout when K4A_WAIT_INFINITE is set.
				printf("Error! Add capture to tracker process queue timeout!\n");
				break;
			}
			else if (queue_capture_result == K4A_WAIT_RESULT_FAILED)
			{
				printf("Error! Add capture to tracker process queue failed!\n");
				break;
			}

			k4abt_frame_t body_frame = NULL;
			k4a_wait_result_t pop_frame_result = k4abt_tracker_pop_result(tracker, &body_frame, K4A_WAIT_INFINITE);
			if (pop_frame_result == K4A_WAIT_RESULT_SUCCEEDED)
			{
				// Successfully popped the body tracking result. Start your processing

				size_t num_bodies = k4abt_frame_get_num_bodies(body_frame);
				printf("%zu bodies are detected!\n", num_bodies);
				//change all of this to care about the joints we need
				for (size_t i = 0; i < num_bodies; i++)
				{
					k4abt_skeleton_t skeleton;
					k4abt_frame_get_body_skeleton(body_frame, i, &skeleton);
					uint32_t id = k4abt_frame_get_body_id(body_frame, i);
					//look up skeleton.joints indexes
					//code here has to do with triggering data when arm moves
					float rhandy = skeleton.joints[11].position.xyz.y;
					float rhandz = skeleton.joints[11].position.xyz.z;
					//rhand[frame_count] = rhandy;
					//if (rhand[frame_count] <(abs(rhand[frame_count - 5] + 20)))
					//{
						//trigger++;
					//}
					float rhandx = skeleton.joints[11].position.xyz.z;
					printf("Right Hand: \n");
					printf("X: %f\n", rhandx);
					printf("Y: %f\n", rhandy);
					//printf("Y: array value %f\n", rhand[frame_count]);
					//printf("Y: array value -5 %f\n", rhand[frame_count - 5]);
					printf("Z %f/n", rhandz);
					//printf("Trigger = %f/n", trigger);

					//if (trigger > 1)
					//{
						//rfinger =23
						float rfingerx = skeleton.joints[23].position.xyz.x;
						float rfingery = skeleton.joints[23].position.xyz.y;
						float rfingerz = skeleton.joints[23].position.xyz.z;
						printf("Right Fingers: \n");
						printf("X: %f\n", rfingerx);
						printf("Y: %f\n", rfingery);
						printf("Z: %f\n", rfingerz);
						//rwrist=10
						float rwristx = skeleton.joints[10].position.xyz.x;
						float rwristy = skeleton.joints[10].position.xyz.y;
						float rwristz = skeleton.joints[10].position.xyz.z;
						printf("Right Wrist: \n");
						printf("X: %f\n", rwristx);
						printf("Y: %f\n", rwristy);
						printf("Z: %f\n", rwristz);
						//rshoulder=9
						float rshoulderx = skeleton.joints[9].position.xyz.x;
						float rshouldery = skeleton.joints[9].position.xyz.y;
						float rshoulderz = skeleton.joints[9].position.xyz.z;
						printf("Right Shoulder: \n");
						printf("X: %f\n", rshoulderx);
						printf("Y: %f\n", rshouldery);
						printf("Z: %f\n", rshoulderz);
						//keep
						float navalx = skeleton.joints[1].position.xyz.x;
						float navaly = skeleton.joints[1].position.xyz.y;
						float navalz = skeleton.joints[1].position.xyz.z;
						printf("Spine - Naval: \n");
						printf("X: %f\n", navalx);
						printf("Y: %f\n", navaly);
						printf("Z: %f\n", navalz);
						//keep (in data i found 2 is neck? maybe change to 20)
						float chestx = skeleton.joints[2].position.xyz.x;
						float chesty = skeleton.joints[2].position.xyz.y;
						float chestz = skeleton.joints[2].position.xyz.z;
						printf("Spine - Chest: \n");
						printf("X: %f\n", chestx);
						printf("Y: %f\n", chesty);
						printf("Z: %f\n", chestz);
						//rclavicle=8
						float rclaviclex = skeleton.joints[8].position.xyz.x;
						float rclavicley = skeleton.joints[8].position.xyz.y;
						float rclaviclez = skeleton.joints[8].position.xyz.z;
						printf("Right Clavicle: \n");
						printf("X: %f\n", rclaviclex);
						printf("Y: %f\n", rclavicley);
						printf("Z: %f\n", rclaviclez);
						//rhead=3
						float headx = skeleton.joints[3].position.xyz.x;
						float heady = skeleton.joints[3].position.xyz.y;
						float headz = skeleton.joints[3].position.xyz.z;
						printf("Head: \n");
						printf("X: %f\n", headx);
						printf("Y: %f\n", heady);
						printf("Z: %f\n", headz);


						totalchesty = totalchesty + chesty;
						totalnavaly = totalnavaly + navaly;
						totalrfingery = totalrfingery + rfingery;
						totalrhandy = totalrhandy + rhandy;
						totalrwristy = totalrwristy + rwristy;
						totalrshouldery = totalrshouldery + rshouldery;
						totalrclavicley = totalrclavicley + rclavicley;
						totalheady = totalheady + heady;
						//trigcount++;
					//}
				}
				k4a_image_t body_index_map = k4abt_frame_get_body_index_map(body_frame);

				k4a_image_release(body_index_map);

				k4abt_frame_release(body_frame); // Remember to release the body frame once you finish using it
			}
			else if (pop_frame_result == K4A_WAIT_RESULT_TIMEOUT)
			{
				//  It should never hit timeout when K4A_WAIT_INFINITE is set.
				printf("Error! Pop body frame result timeout!\n");
				break;
			}
			else
			{
				printf("Pop body frame result failed!\n");
				break;
			}
		}
		else if (get_capture_result == K4A_WAIT_RESULT_TIMEOUT)
		{
			// It should never hit time out when K4A_WAIT_INFINITE is set.
			printf("Error! Get depth frame time out!\n");
			break;
		}
		else
		{
			printf("Get depth capture returned error: %d\n", get_capture_result);
			break;
		}

	} while (frame_count < 90); 
	//collect data for about 3 seconds 
	//change these averages to joints we will be tracking
	float chestaverage = totalchesty / 90;
	float navalaverage = totalnavaly / 90;
	float rfingeraverage = totalrfingery / 90;
	float rhandaverage = totalrhandy / 90;
	float rwristaverage = totalrwristy / 90;
	float rshoulderaverage = totalrshouldery / 90;
	float rclavicleaverage = totalrclavicley / 90;
	float headaverage = totalheady / 90;
	float upperaverage = (chestaverage + navalaverage) / 2;
	
	FILE* fp;
	errno_t err;
	//change file name
	err = fopen_s(&fp, "D:\\CEI\\CEI_Matlab_files_09_21_21\\Matlab\\test.txt", "w");

	if (err != NULL)
	{
		printf("Error Opening File!\n");
		return 0;
	}
	//change these averages to account for joints we care about
	fprintf(fp, "Spine - Chest: %f \n", chestaverage);
	fprintf(fp, "Spine - Naval: %f \n", navalaverage);
	fprintf(fp, "Right Finger: %f \n", rfingeraverage);
	fprintf(fp, "Right Hand: %f \n", rhandaverage);
	fprintf(fp, "Right Wrist: %f \n", rwristaverage);
	fprintf(fp, "Right Shoulder: %f \n", rshoulderaverage);
	fprintf(fp, "Right Clavicle: %f \n", rclavicleaverage);
	fprintf(fp, "Chest Height: %f \n", upperaverage);
	fprintf(fp, "Head: %f \n", headaverage);
	fclose(fp);
	
	/*
	//change this one to be about velocity calculations
	FILE* f;
	errno_t err2;
	//change file name directory
	err2 = fopen_s(&f, "C:\\Users\\hpackard\\Documents\\MATLAB\\CEI_Matlab_files_09_21_21\\velocity.txt", "w");

	if (err2 != NULL)
	{
	printf("Error Opening File!\n");
	return 0;
	}

	fprintf(f, "%f", zone_height);

	fclose(f);
	*/
	printf("Finished body tracking processing!\n");


	k4abt_tracker_shutdown(tracker);
	k4abt_tracker_destroy(tracker);
	k4a_device_stop_cameras(device);
	k4a_device_close(device);

	return 0;
}
